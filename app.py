import streamlit as st
import math
import pandas as pd
from db_utils import (save_design, get_all_designs, get_design_by_id, 
                      delete_design, get_regional_pricing, get_pricing_by_region)
from pdf_generator import generate_pdf_report
from diagram_generator import create_foundation_diagram
import os

def calc_slab_fundament(A, B, H, rebar_diameter, grid_x, grid_y,
                        concrete_price, steel_price, formwork_price, waste_factor):
    volume_bet = A * B * H * (1 + waste_factor)

    area_bottom = A * B
    area_sides = 2 * (A + B) * H
    area_formwork = area_bottom + area_sides

    d_m = rebar_diameter / 1000.0
    n_x = math.ceil(B / grid_x) + 1
    n_y = math.ceil(A / grid_y) + 1
    length_x = n_x * A
    length_y = n_y * B
    length_rebar = length_x + length_y

    cross_section_area = math.pi * (d_m ** 2) / 4
    density_steel = 7850
    mass_rebar = length_rebar * cross_section_area * density_steel

    cost_concrete = volume_bet * concrete_price
    cost_steel = mass_rebar * steel_price
    cost_formwork = area_formwork * formwork_price
    cost_total = cost_concrete + cost_steel + cost_formwork

    return {
        'volume_bet': volume_bet,
        'area_formwork': area_formwork,
        'length_rebar': length_rebar,
        'mass_rebar': mass_rebar,
        'cost_concrete': cost_concrete,
        'cost_steel': cost_steel,
        'cost_formwork': cost_formwork,
        'cost_total': cost_total
    }

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞", page_icon="üèóÔ∏è", layout="wide")

st.title("üèóÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–∏—Ç–Ω–æ–≥–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞")

tab1, tab2, tab3 = st.tabs(["üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤"])

with tab1:
    st.markdown("---")
    
    col_settings1, col_settings2 = st.columns([1, 1])
    
    with col_settings1:
        use_regional = st.checkbox("üåç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã")
        
        if use_regional:
            try:
                regional_prices = get_regional_pricing()
                region_names = [r['region_name'] for r in regional_prices]
                selected_region = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", region_names)
                
                if selected_region:
                    pricing = get_pricing_by_region(selected_region)
                    st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: {selected_region}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω: {str(e)}")
                use_regional = False
        
        load_design = st.checkbox("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
        
        if load_design:
            try:
                designs = get_all_designs()
                if designs:
                    design_options = {f"{d['name']} (ID: {d['id']})": d['id'] for d in designs}
                    selected_design_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç", list(design_options.keys()))
                    
                    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"):
                        design_id = design_options[selected_design_name]
                        loaded_design = get_design_by_id(design_id)
                        
                        if loaded_design:
                            st.session_state['loaded_design'] = loaded_design
                            st.success(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{loaded_design['name']}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
                            st.rerun()
                else:
                    st.warning("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}")
    
    if 'loaded_design' in st.session_state:
        ld = st.session_state['loaded_design']
        default_A = float(ld['length_a'])
        default_B = float(ld['width_b'])
        default_H = float(ld['thickness_h'])
        default_rebar = float(ld['rebar_diameter'])
        default_grid_x = float(ld['grid_x'])
        default_grid_y = float(ld['grid_y'])
        default_concrete_price = float(ld['concrete_price'])
        default_steel_price = float(ld['steel_price'])
        default_formwork_price = float(ld['formwork_price'])
        default_waste = float(ld['waste_factor']) * 100
    elif use_regional and selected_region:
        default_A = 10.0
        default_B = 8.0
        default_H = 0.3
        default_rebar = 12.0
        default_grid_x = 0.2
        default_grid_y = 0.2
        default_concrete_price = float(pricing['concrete_price'])
        default_steel_price = float(pricing['steel_price'])
        default_formwork_price = float(pricing['formwork_price'])
        default_waste = 5.0
    else:
        default_A = 10.0
        default_B = 8.0
        default_H = 0.3
        default_rebar = 12.0
        default_grid_x = 0.2
        default_grid_y = 0.2
        default_concrete_price = 4500.0
        default_steel_price = 50.0
        default_formwork_price = 350.0
        default_waste = 5.0
    
    st.markdown("---")
    
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìè –†–∞–∑–º–µ—Ä—ã –ø–ª–∏—Ç—ã")
        A = st.number_input("–î–ª–∏–Ω–∞ –ø–ª–∏—Ç—ã (–º)", min_value=0.1, value=default_A, step=0.1, format="%.2f")
        B = st.number_input("–®–∏—Ä–∏–Ω–∞ –ø–ª–∏—Ç—ã (–º)", min_value=0.1, value=default_B, step=0.1, format="%.2f")
        H = st.number_input("–¢–æ–ª—â–∏–Ω–∞ –ø–ª–∏—Ç—ã (–º)", min_value=0.01, value=default_H, step=0.01, format="%.2f")
        
        st.subheader("üî© –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–º–∞—Ç—É—Ä—ã")
        rebar_diameter = st.number_input("–î–∏–∞–º–µ—Ç—Ä –∞—Ä–º–∞—Ç—É—Ä—ã (–º–º)", min_value=1.0, value=default_rebar, step=1.0, format="%.1f")
        grid_x = st.number_input("–®–∞–≥ —Å–µ—Ç–∫–∏ –ø–æ X (–º)", min_value=0.1, value=default_grid_x, step=0.05, format="%.2f")
        grid_y = st.number_input("–®–∞–≥ —Å–µ—Ç–∫–∏ –ø–æ Y (–º)", min_value=0.1, value=default_grid_y, step=0.05, format="%.2f")

    with col2:
        st.subheader("üí∞ –¶–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        concrete_price = st.number_input("–¶–µ–Ω–∞ –±–µ—Ç–æ–Ω–∞ –∑–∞ –º¬≥ (—Ä—É–±)", min_value=0.0, value=default_concrete_price, step=100.0, format="%.2f")
        steel_price = st.number_input("–¶–µ–Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—ã –∑–∞ –∫–≥ (—Ä—É–±)", min_value=0.0, value=default_steel_price, step=1.0, format="%.2f")
        formwork_price = st.number_input("–¶–µ–Ω–∞ –æ–ø–∞–ª—É–±–∫–∏ –∑–∞ –º¬≤ (—Ä—É–±)", min_value=0.0, value=default_formwork_price, step=10.0, format="%.2f")
        
        st.subheader("üìä –ó–∞–ø–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        waste_factor_percent = st.number_input("–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (%)", min_value=0.0, value=default_waste, step=1.0, format="%.1f")
        waste_factor = waste_factor_percent / 100.0

    st.markdown("---")

    if st.button("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary", use_container_width=True):
        results = calc_slab_fundament(A, B, H, rebar_diameter, grid_x, grid_y,
                                      concrete_price, steel_price, formwork_price, waste_factor)
        
        st.session_state['current_results'] = results
        st.session_state['current_params'] = {
            'A': A, 'B': B, 'H': H, 'rebar_diameter': rebar_diameter,
            'grid_x': grid_x, 'grid_y': grid_y, 'concrete_price': concrete_price,
            'steel_price': steel_price, 'formwork_price': formwork_price,
            'waste_factor': waste_factor
        }
        
        st.success("‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    if 'current_results' in st.session_state:
        results = st.session_state['current_results']
        params = st.session_state['current_params']
        
        st.markdown("---")
        st.header("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")
        
        st.subheader("üèóÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        col_m1, col_m2, col_m3 = st.columns(3)
        
        with col_m1:
            st.metric("–û–±—ä—ë–º –±–µ—Ç–æ–Ω–∞", f"{results['volume_bet']:.2f} –º¬≥")
        
        with col_m2:
            st.metric("–ü–ª–æ—â–∞–¥—å –æ–ø–∞–ª—É–±–∫–∏", f"{results['area_formwork']:.2f} –º¬≤")
        
        with col_m3:
            st.metric("–î–ª–∏–Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—ã", f"{results['length_rebar']:.2f} –º")
        
        st.metric("–ú–∞—Å—Å–∞ –∞—Ä–º–∞—Ç—É—Ä—ã", f"{results['mass_rebar']:.2f} –∫–≥")
        
        st.markdown("---")
        
        st.subheader("üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å")
        col_c1, col_c2, col_c3 = st.columns(3)
        
        with col_c1:
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ—Ç–æ–Ω–∞", f"{results['cost_concrete']:,.2f} —Ä—É–±")
        
        with col_c2:
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–º–∞—Ç—É—Ä—ã", f"{results['cost_steel']:,.2f} —Ä—É–±")
        
        with col_c3:
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–∞–ª—É–±–∫–∏", f"{results['cost_formwork']:,.2f} —Ä—É–±")
        
        st.markdown("---")
        
        st.subheader("üí∞ –ò—Ç–æ–≥–æ")
        st.markdown(f"### **{results['cost_total']:,.2f} —Ä—É–±**")
        
        st.markdown("---")
        
        st.subheader("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞")
        diagram_file = create_foundation_diagram(params['A'], params['B'], params['H'], 
                                                  params['rebar_diameter'], params['grid_x'], params['grid_y'])
        st.image(diagram_file, use_container_width=True)
        
        st.markdown("---")
        
        col_action1, col_action2, col_action3 = st.columns(3)
        
        with col_action1:
            design_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", value="–ú–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç")
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", use_container_width=True):
                try:
                    design_id = save_design(design_name, params, results)
                    st.success(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ID: {design_id}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        with col_action2:
            if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF", use_container_width=True):
                try:
                    pdf_file = generate_pdf_report(params, results)
                    with open(pdf_file, "rb") as f:
                        st.session_state['pdf_data'] = f.read()
                    st.success("‚úÖ PDF –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            
            if 'pdf_data' in st.session_state:
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
                    data=st.session_state['pdf_data'],
                    file_name="foundation_report.pdf",
                    mime="application/pdf",
                    use_container_width=True,
                    key="pdf_download"
                )
        
        with col_action3:
            if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", use_container_width=True):
                try:
                    export_data = {
                        "–ü–∞—Ä–∞–º–µ—Ç—Ä": [
                            "–î–ª–∏–Ω–∞ (–º)", "–®–∏—Ä–∏–Ω–∞ (–º)", "–¢–æ–ª—â–∏–Ω–∞ (–º)",
                            "–î–∏–∞–º–µ—Ç—Ä –∞—Ä–º–∞—Ç—É—Ä—ã (–º–º)", "–®–∞–≥ X (–º)", "–®–∞–≥ Y (–º)",
                            "–¶–µ–Ω–∞ –±–µ—Ç–æ–Ω–∞ (—Ä—É–±/–º¬≥)", "–¶–µ–Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—ã (—Ä—É–±/–∫–≥)",
                            "–¶–µ–Ω–∞ –æ–ø–∞–ª—É–±–∫–∏ (—Ä—É–±/–º¬≤)", "–ó–∞–ø–∞—Å (%)",
                            "", "–û–±—ä—ë–º –±–µ—Ç–æ–Ω–∞ (–º¬≥)", "–ü–ª–æ—â–∞–¥—å –æ–ø–∞–ª—É–±–∫–∏ (–º¬≤)",
                            "–î–ª–∏–Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—ã (–º)", "–ú–∞—Å—Å–∞ –∞—Ä–º–∞—Ç—É—Ä—ã (–∫–≥)",
                            "–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ—Ç–æ–Ω–∞ (—Ä—É–±)", "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–º–∞—Ç—É—Ä—ã (—Ä—É–±)",
                            "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–∞–ª—É–±–∫–∏ (—Ä—É–±)", "–ò–¢–û–ì–û (—Ä—É–±)"
                        ],
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                            params['A'], params['B'], params['H'],
                            params['rebar_diameter'], params['grid_x'], params['grid_y'],
                            params['concrete_price'], params['steel_price'],
                            params['formwork_price'], params['waste_factor']*100,
                            "", results['volume_bet'], results['area_formwork'],
                            results['length_rebar'], results['mass_rebar'],
                            results['cost_concrete'], results['cost_steel'],
                            results['cost_formwork'], results['cost_total']
                        ]
                    }
                    df_export = pd.DataFrame(export_data)
                    st.session_state['csv_data'] = df_export.to_csv(index=False, encoding='utf-8-sig')
                    st.success("‚úÖ CSV –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            
            if 'csv_data' in st.session_state:
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
                    data=st.session_state['csv_data'],
                    file_name="foundation_calculation.csv",
                    mime="text/csv",
                    use_container_width=True,
                    key="csv_download"
                )
        
        st.markdown("---")
        st.subheader("üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞")
        
        data = {
            "–ü–∞—Ä–∞–º–µ—Ç—Ä": [
                "–û–±—ä—ë–º –±–µ—Ç–æ–Ω–∞", "–ü–ª–æ—â–∞–¥—å –æ–ø–∞–ª—É–±–∫–∏", "–û–±—â–∞—è –¥–ª–∏–Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—ã",
                "–ú–∞—Å—Å–∞ –∞—Ä–º–∞—Ç—É—Ä—ã", "–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ—Ç–æ–Ω–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–º–∞—Ç—É—Ä—ã",
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–∞–ª—É–±–∫–∏", "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                f"{results['volume_bet']:.2f} –º¬≥",
                f"{results['area_formwork']:.2f} –º¬≤",
                f"{results['length_rebar']:.2f} –º",
                f"{results['mass_rebar']:.2f} –∫–≥",
                f"{results['cost_concrete']:,.2f} —Ä—É–±",
                f"{results['cost_steel']:,.2f} —Ä—É–±",
                f"{results['cost_formwork']:,.2f} —Ä—É–±",
                f"{results['cost_total']:,.2f} —Ä—É–±"
            ]
        }
        
        df = pd.DataFrame(data)
        st.table(df)
    else:
        st.info("üëÜ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

with tab2:
    st.header("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")
    
    try:
        designs = get_all_designs()
        
        if designs:
            st.write(f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: **{len(designs)}**")
            st.markdown("---")
            
            for design in designs:
                with st.expander(f"üìÅ {design['name']} (ID: {design['id']}) - {design['created_at'].strftime('%d.%m.%Y %H:%M')}"):
                    col_d1, col_d2 = st.columns(2)
                    
                    with col_d1:
                        st.write("**–†–∞–∑–º–µ—Ä—ã:**")
                        st.write(f"- –î–ª–∏–Ω–∞: {design['length_a']} –º")
                        st.write(f"- –®–∏—Ä–∏–Ω–∞: {design['width_b']} –º")
                        st.write(f"- –¢–æ–ª—â–∏–Ω–∞: {design['thickness_h']} –º")
                        
                        st.write("**–ê—Ä–º–∞—Ç—É—Ä–∞:**")
                        st.write(f"- –î–∏–∞–º–µ—Ç—Ä: {design['rebar_diameter']} –º–º")
                        st.write(f"- –®–∞–≥ X: {design['grid_x']} –º")
                        st.write(f"- –®–∞–≥ Y: {design['grid_y']} –º")
                    
                    with col_d2:
                        st.write("**–°—Ç–æ–∏–º–æ—Å—Ç—å:**")
                        st.write(f"- –ë–µ—Ç–æ–Ω: {design['cost_concrete']:,.2f} —Ä—É–±")
                        st.write(f"- –ê—Ä–º–∞—Ç—É—Ä–∞: {design['cost_steel']:,.2f} —Ä—É–±")
                        st.write(f"- –û–ø–∞–ª—É–±–∫–∞: {design['cost_formwork']:,.2f} —Ä—É–±")
                        st.write(f"**–ò–¢–û–ì–û: {design['cost_total']:,.2f} —Ä—É–±**")
                    
                    col_btn1, col_btn2 = st.columns(2)
                    
                    with col_btn1:
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"del_{design['id']}"):
                            try:
                                delete_design(design['id'])
                                st.success("–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                    
                    with col_btn2:
                        if st.button(f"üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", key=f"load_{design['id']}"):
                            st.session_state['loaded_design'] = design
                            st.success(f"–ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'")
        else:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}")

with tab3:
    st.header("üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤")
    
    try:
        designs = get_all_designs()
        
        if designs:
            history_data = {
            "ID": [d['id'] for d in designs],
            "–ù–∞–∑–≤–∞–Ω–∏–µ": [d['name'] for d in designs],
            "–î–∞—Ç–∞": [d['created_at'].strftime('%d.%m.%Y %H:%M') for d in designs],
            "–†–∞–∑–º–µ—Ä (–îx–®x–í)": [f"{d['length_a']}x{d['width_b']}x{d['thickness_h']}" for d in designs],
            "–û–±—ä—ë–º –±–µ—Ç–æ–Ω–∞ (–º¬≥)": [f"{float(d['volume_bet']):.2f}" for d in designs],
            "–ú–∞—Å—Å–∞ –∞—Ä–º–∞—Ç—É—Ä—ã (–∫–≥)": [f"{float(d['mass_rebar']):.2f}" for d in designs],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±)": [f"{float(d['cost_total']):,.2f}" for d in designs]
        }
        
            df_history = pd.DataFrame(history_data)
            st.dataframe(df_history, use_container_width=True)
            
            st.markdown("---")
            
            if st.button("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV"):
                st.session_state['history_csv'] = df_history.to_csv(index=False, encoding='utf-8-sig')
                st.success("‚úÖ CSV –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
            
            if 'history_csv' in st.session_state:
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV –∏—Å—Ç–æ—Ä–∏–∏",
                    data=st.session_state['history_csv'],
                    file_name="foundation_history.csv",
                    mime="text/csv",
                    key="history_csv_download"
                )
            
            st.markdown("---")
            st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            if len(designs) >= 2:
                design_names = [f"{d['name']} (ID: {d['id']})" for d in designs]
                compare_designs = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–¥–æ 5)", design_names, max_selections=5)
                
                if len(compare_designs) >= 2:
                    selected_ids = [int(name.split("ID: ")[1].rstrip(")")) for name in compare_designs]
                    selected_designs = [d for d in designs if d['id'] in selected_ids]
                    
                    comparison_data = {
                        "–ü–∞—Ä–∞–º–µ—Ç—Ä": [
                            "–î–ª–∏–Ω–∞ (–º)", "–®–∏—Ä–∏–Ω–∞ (–º)", "–¢–æ–ª—â–∏–Ω–∞ (–º)",
                            "–û–±—ä—ë–º –±–µ—Ç–æ–Ω–∞ (–º¬≥)", "–ú–∞—Å—Å–∞ –∞—Ä–º–∞—Ç—É—Ä—ã (–∫–≥)",
                            "–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ—Ç–æ–Ω–∞ (—Ä—É–±)", "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–º–∞—Ç—É—Ä—ã (—Ä—É–±)",
                            "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–∞–ª—É–±–∫–∏ (—Ä—É–±)", "–ò–¢–û–ì–û (—Ä—É–±)"
                        ]
                    }
                    
                    for design in selected_designs:
                        comparison_data[design['name']] = [
                            float(design['length_a']),
                            float(design['width_b']),
                            float(design['thickness_h']),
                            float(design['volume_bet']),
                            float(design['mass_rebar']),
                            float(design['cost_concrete']),
                            float(design['cost_steel']),
                            float(design['cost_formwork']),
                            float(design['cost_total'])
                        ]
                    
                    df_comparison = pd.DataFrame(comparison_data)
                    st.table(df_comparison)
            else:
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
